apiVersion: "monitoring.coreos.com/v1"
kind: "PrometheusRule"
metadata:
  name: "k8s-pod-rules"
  namespace: "monitoring"
  labels:
    release: "prom-operator"
spec:
  groups:
    - name: "pod-record.rules"
      rules:
        - expr: |
            max by (cluster, namespace, workload, pod) (
                label_replace(
                    label_replace(
                        kube_pod_owner{job="kube-state-metrics", owner_kind="ReplicaSet"}, "replicaset", "$1", "owner_name", "(.*)") * on (replicaset, namespace) group_left(owner_name)
                topk by (replicaset, namespace) (1, max by (replicaset, namespace, owner_name) (kube_replicaset_owner{job="kube-state-metrics"})), "workload", "$1", "owner_name", "(.*)")
            )
          record: 'namespace_workload_pod:kube_pod_owner:relabel'
          labels:
            workload_type: "deployment"

        - expr: |
            max by (cluster, namespace, workload, pod) (
                label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="DaemonSet"}, "workload", "$1", "owner_name", "(.*)")
            )
          record: 'namespace_workload_pod:kube_pod_owner:relabel'
          labels:
            workload_type: "daemonset"

        - expr: |
            max by (cluster, namespace, workload, pod) (
                label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="StatefulSet"}, "workload", "$1", "owner_name", "(.*)")
            )
          record: 'namespace_workload_pod:kube_pod_owner:relabel'
          labels:
            workload_type: "statefulset"

        - expr: |
            max by (cluster, namespace, workload, pod) (
                label_replace(kube_pod_owner{job="kube-state-metrics", owner_kind="Job"}, "workload", "$1", "owner_name", "(.*)")
            )
          record: 'namespace_workload_pod:kube_pod_owner:relabel'
          labels:
            workload_type: "job"

    - name: "container-record.rules"
      rules:
        - expr: |
            sum by (cluster, namespace, pod, container) (
                irate(container_cpu_usage_seconds_total{job="kubelet", metrics_path="/metrics/cadvisor", image!=""}[5m]))
                * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""})
            )
          record: 'node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate'

        - expr: |
            container_memory_cache{job="kubelet", metrics_path="/metrics/cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node)
            topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
          record: 'node_namespace_pod_container:container_memory_cache'

        - expr: |
            container_memory_rss{job="kubelet", metrics_path="/metrics/cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node)
            topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
          record: 'node_namespace_pod_container:container_memory_rss'

        - expr: |
            container_memory_swap{job="kubelet", metrics_path="/metrics/cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node)
            topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
          record: 'node_namespace_pod_container:container_memory_swap'

        - expr: |
            container_memory_working_set_bytes{job="kubelet", metrics_path="/metrics/cadvisor", image!=""} * on (cluster, namespace, pod) group_left(node)
            topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
          record: 'node_namespace_pod_container:container_memory_working_set_bytes'

        - expr: |
            kube_pod_container_resource_requests{resource="memory", job="kube-state-metrics"} * on (namespace, pod, cluster) group_left
            max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
          record: 'cluster:namespace:pod_memory:active:kube_pod_container_resource_requests'

        - expr: |
            sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource="memory",job="kube-state-metrics"})
            * on (namespace, pod, cluster) group_left max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
          record: 'namespace_memory:kube_pod_container_resource_requests:sum'

        - expr: |
            kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left
            max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
          record: 'cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests'

        - expr: |
            sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{resource="cpu",job="kube-state-metrics"})
            * on (namespace, pod, cluster) group_left max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
          record: 'namespace_cpu:kube_pod_container_resource_requests:sum'

        - expr: |
            kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"} * on (namespace, pod, cluster)
            group_left max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
          record: 'cluster:namespace:pod_memory:active:kube_pod_container_resource_limits'

        - expr: |
            sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource="memory",job="kube-state-metrics"})
            * on (namespace, pod, cluster) group_left max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
          record: 'namespace_memory:kube_pod_container_resource_limits:sum'

        - expr: |
            kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"} * on (namespace, pod, cluster) group_left
            max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
          record: 'cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits'

        - expr: |
            sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{resource="cpu",job="kube-state-metrics"})
            * on (namespace, pod, cluster) group_left max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
          record: 'namespace_cpu:kube_pod_container_resource_limits:sum'

    - name: "container-alert.rules"
      rules:
        - alert: "KubeCPUOvercommit"
          expr: |
            sum(namespace_cpu:kube_pod_container_resource_requests:sum{job="kube-state-metrics"}) by (cluster)
            - (sum(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)
            - max(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)) > 0
            and
            (sum(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)
            - max(kube_node_status_allocatable{job="kube-state-metrics",resource="cpu"}) by (cluster)) > 0
          for: "10m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Cluster has overcommitted CPU resource requests.'
            description: |
              Cluster {{ $labels.cluster }} has overcommitted CPU resource requests for Pods by {{ $value }} CPU shares and cannot tolerate node failure.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuovercommit'

        - alert: "KubeMemoryOvercommit"
          expr: |
            sum(namespace_memory:kube_pod_container_resource_requests:sum) by (cluster)
            - (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)
            - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)) > 0
            and
            (sum(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)
            - max(kube_node_status_allocatable{resource="memory", job="kube-state-metrics"}) by (cluster)) > 0
          for: "10m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Cluster has overcommitted memory resource requests.'
            description: |
              Cluster {{ $labels.cluster }} has overcommitted memory resource requests for Pods by {{ $value | humanize }} bytes and cannot tolerate node failure.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryovercommit'

        - alert: "KubeCPUQuotaOvercommit"
          expr: |
            sum(
                min without(resource) (kube_resourcequota{job="kube-state-metrics",type="hard",resource=~"(cpu|requests.cpu)"})
            ) by (cluster) / sum(kube_node_status_allocatable{resource="cpu",job="kube-state-metrics"}) by (cluster) > 1.5
          for: "5m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Cluster has overcommitted CPU resource requests.'
            description: 'Cluster {{ $labels.cluster }}  has overcommitted CPU resource requests for Namespaces.'
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecpuquotaovercommit'

        - alert: "KubeMemoryQuotaOvercommit"
          expr: |
            sum(
                min without(resource) (kube_resourcequota{job="kube-state-metrics",type="hard",resource=~"(memory|requests.memory)"})
            ) by (cluster) / sum(kube_node_status_allocatable{resource="memory",job="kube-state-metrics"}) by (cluster) > 1.5
          for: "5m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Cluster has overcommitted memory resource requests.'
            description: 'Cluster {{ $labels.cluster }}  has overcommitted memory resource requests for Namespaces.'
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubememoryquotaovercommit'

        - alert: "KubeQuotaAlmostFull"
          expr: |
            kube_resourcequota{job="kube-state-metrics",type="used"}
            / ignoring(instance,job,type) (kube_resourcequota{job="kube-state-metrics",type="hard"} > 0) > 0.9 < 1
          for: "15m"
          labels:
            severity: "info"
          annotations:
            summary: 'Namespace quota is going to be full.'
            description: |
              Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaalmostfull'

        - alert: "KubeQuotaFullyUsed"
          expr: |
            kube_resourcequota{job="kube-state-metrics",type="used"}
            / ignoring(instance,job,type) (kube_resourcequota{job="kube-state-metrics",type="hard"} > 0) == 1
          for: "15m"
          labels:
            severity: "info"
          annotations:
            summary: 'Namespace quota is fully used.'
            description: |
              Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotafullyused'

        - alert: "KubeQuotaExceeded"
          expr: |
            kube_resourcequota{job="kube-state-metrics",type="used"}
            / ignoring(instance,job,type) (kube_resourcequota{job="kube-state-metrics",type="hard"} > 0) > 1
          for: "15m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Namespace quota has exceeded the limits.'
            description: |
              Namespace {{ $labels.namespace }} is using {{ $value | humanizePercentage }} of its {{ $labels.resource }} quota.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubequotaexceeded'

        - alert: "CPUThrottlingHigh"
          expr: |
            sum(increase(container_cpu_cfs_throttled_periods_total{container!=""}[5m])) by (cluster, container, pod, namespace)
            / sum(increase(container_cpu_cfs_periods_total[5m])) by (cluster, container, pod, namespace) > (25 / 100)
          for: "15m"
          labels:
            severity: "info"
          annotations:
            summary: 'Processes experience elevated CPU throttling.'
            description: |
              {{ $value | humanizePercentage }} throttling of CPU in namespace {{ $labels.namespace }} for container {{ $labels.container }} in pod {{ $labels.pod }}.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/cputhrottlinghigh'

        - alert: "KubeContainerWaiting"
          expr: |
            sum by (namespace, pod, container, cluster) (kube_pod_container_status_waiting_reason{job="kube-state-metrics",namespace=~".*"}) > 0
          for: "1h"
          labels:
            severity: "warning"
          annotations:
            summary: 'Pod container waiting longer than 1 hour.'
            description: |
              Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container }}) has been in waiting state for longer than 1 hour.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubecontainerwaiting'

    - name: "pod-alert.rules"
      rules:
        - alert: "KubePodCrashLooping"
          expr: |
            max_over_time(kube_pod_container_status_waiting_reason{reason="CrashLoopBackOff",job="kube-state-metrics",namespace=~".*"}[5m]) >= 1
          for: "15m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Pod is crash looping.'
            description: |
              Pod {{ $labels.namespace }}/{{ $labels.pod }} ({{ $labels.container }}) is in waiting state (reason: "CrashLoopBackOff").
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodcrashlooping'

        - alert: "KubePodNotReady"
          expr: |
            sum by (namespace,pod,cluster) (
                max by (namespace,pod,cluster) (kube_pod_status_phase{namespace=~".*",phase=~"Pending|Unknown|Failed"}) * on (namespace,pod,cluster) group_left(owner_kind)
                topk by (namespace,pod,cluster) (1, max by (namespace,pod,owner_kind,cluster) (kube_pod_owner{owner_kind!="Job"}))
            ) > 0
          for: "15m"
          labels:
            severity: "warning"
          annotations:
            summary: 'Pod has been in a non-ready state for more than 15 minutes.'
            description: |
              Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a non-ready state for longer than 15 minutes.
            runbook_url: 'https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepodnotready'

        - alert: "KubePodOomKilled"
          expr: |
            increase(kube_pod_container_status_restarts_total[5m]) *
            on(namespace, pod) group_left kube_pod_container_status_last_terminated_reason{reason="OOMKilled"} > 0
          for: "1m"
          labels:
            severity: "warning"
          annotations:
            summary: "The {{ $labels.namespace }}/{{ $labels.pod }} terminated with OOMKilled reason."
            description: "The {{ $labels.namespace }}/{{ $labels.pod }} terminated with out-of-memory reason."
            runbook_url: ""
